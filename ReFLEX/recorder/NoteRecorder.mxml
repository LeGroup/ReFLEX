<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init()" width="100%" height="100%" frameRate="30" backgroundColor="#1D1D1C">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>

	
	<fx:Script>
		<![CDATA[
        	import org.as3wavsound.WavSound;
        	import org.as3wavsound.WavSoundChannel;
        	import org.bytearray.micrecorder.MicRecorder;
        	import org.bytearray.micrecorder.encoder.WaveEncoder;
        	import org.bytearray.micrecorder.events.RecordingEvent;
        	import fr.kikko.lab.ShineMP3Encoder;
            import com.adobe.images.JPGEncoder;            
            import ru.inspirit.net.MultipartURLLoader;
            import flash.events.Event;
            import flash.events.IOErrorEvent;
            import flash.system.Security;
            import flash.external.ExternalInterface;
            import mx.core.FlexGlobals;
			private var mymic:Microphone;
			private var playback_channel:WavSoundChannel;
			private var micTimer:Timer;
			private var playTimer:Timer;
            private var preparationTimer:Timer;
            private var flashTimer:Timer;
            private var uploaderTimer:Timer;
            private var prep_counter:Number;
            private var volume:Number = .5;
            private var wavEncoder:WaveEncoder = new WaveEncoder( volume );
            private var recorder:MicRecorder;
    		private var sound:WavSound; //WavSound
			private var externalSound:Sound; //Can't play mp3 files with wavSound
			private var soundChannel:SoundChannel = new SoundChannel();
    		private var record_len:Number;
    		private var recording_seconds:Number;
    		private var mp3Encoder:ShineMP3Encoder;
    		private var _bitmapData:BitmapData;
    		private var _flash:BitmapData;
    		private var photo_jpg:ByteArray;
    		private var jpegEncoder:JPGEncoder= new JPGEncoder(80);
    		private var camera:Camera;
            private var video:Video;
            private var camw:Number;
            private var camh:Number;
            private var sound_position:Number;
            private var recording:Boolean;
            private var note_length:Number = 10000;
			private var resizeTimer:Timer;
			private var flashDuration:Number = 50;
			private var recordCanceled:Boolean = false;
			private var soundLoader:URLLoader;
			private var imageLoader:URLLoader;
			
			private function init():void {
			    //Security.loadPolicyFile(server_path+'crossdomain.php');
                camw=420;
                camh=280;
				
				_flash=new BitmapData(camw,camh,false, 0xaaFF88);
				sound_position=0;
				
                // Taking team photos 
                ExternalInterface.addCallback("initCamera", initCamera);
                // ExternalInterface.addCallback("keepPhoto", keepPhoto);

                // recording team notes
                ExternalInterface.addCallback("initMic", initMic);
                ExternalInterface.addCallback("startRecording", startRecording);
                ExternalInterface.addCallback("stopRecording", stopRecording);
                ExternalInterface.addCallback("startPlaying", startPlaying);
                ExternalInterface.addCallback("stopPlaying", stopPlaying);
                ExternalInterface.addCallback("movePlaybackToPosition", movePlaybackToPosition);
                ExternalInterface.addCallback("cancelRecording", cancelRecording);
                ExternalInterface.addCallback("redoRecording", redoRecording);
                ExternalInterface.addCallback("saveRecording", saveRecording);
                ExternalInterface.addCallback("resizeFix", resizeFix);
                ExternalInterface.addCallback("loadNote", loadNote);
                ExternalInterface.call("recorderInitialized");
			}
			
			private function debug(msg:String):void { 
				ExternalInterface.call('debug', 'FLASH: ' + msg);
			}
			
			private function resizeFix():void {
				if(video != null) {
					video.width = stage.stageWidth;
					video.height = stage.stageHeight;
				}
			}
			
			private function initCamera():void {
                // get Camera
				try{
				
                video= new Video(camw,camh);
                camera = Camera.getCamera();
				resizeFix();
				} catch(e:Error) {
					debug(e.toString());
				}

                function statusHandler(event:StatusEvent):void { 
                    switch (event.code) { 
                        case "Camera.Muted":
							debug('Camera denied');
                            ExternalInterface.call("cameraDenied"); 
                            break; 
                        case "Camera.Unmuted": 
							debug('Camera accepted');
                            ExternalInterface.call("cameraAccepted"); 
                            break; 
                    } 
                }
                if (camera) {
                    debug('Asking permission to use camera...');
                    camera.addEventListener(StatusEvent.STATUS, statusHandler)
                    camera.setMode(camw,camh,12,false);
                    camera.setQuality(0,100);
                    video.attachCamera(camera);
                    if (!camera.muted) {
						debug('Camera always allowed');
                        ExternalInterface.call("cameraAccepted"); 
                    }
                }
                uic.addChild(video);
			}

            private function takePhoto():void {
                flashTimer = new Timer(flashDuration, 1);
                flashTimer.addEventListener(TimerEvent.TIMER_COMPLETE, setFlash);
                flashTimer.reset();                
                flashTimer.start(); 
                _bitmapData = new BitmapData(camw, camh);
                _bitmapData.draw(video);
                photo_jpg = jpegEncoder.encode(_bitmapData);
                video.attachCamera(null);
            }
			
			private function setFlash(event:TimerEvent):void {
				captured_shot.visible = true;
				captured_shot.source = _flash;
				flashTimer = new Timer(flashDuration, 1);
				flashTimer.addEventListener(TimerEvent.TIMER_COMPLETE, removeFlash);
				flashTimer.reset();
				flashTimer.start();
			}
			
			private function removeFlash(event:TimerEvent):void {
				captured_shot.source = _bitmapData;
			}

            private function initMic():void {
				// Get Microphone
				mymic = Microphone.getMicrophone();
				mymic.rate = 22;
				mymic.setSilenceLevel(0);				
				mymic.setUseEchoSuppression(true);
				mymic.soundTransform = new SoundTransform(0,0);
				mymic.setLoopBack(true);
				
				recorder = new MicRecorder( wavEncoder, mymic );
    			recorder.addEventListener(RecordingEvent.RECORDING, _onRecording);
    			recorder.addEventListener(Event.COMPLETE, _onRecordComplete);

				prep_counter = 4;
                preparationTimer = new Timer(1000, prep_counter);
                preparationTimer.addEventListener(TimerEvent.TIMER, _prepareAnnouncement);
                preparationTimer.addEventListener(TimerEvent.TIMER_COMPLETE, _prepareComplete);                
				micTimer = new Timer(100);
				micTimer.addEventListener(TimerEvent.TIMER, _miclevel);
				micTimer.start();
            }

			// Recording 
			private function startRecording():void {
				captured_shot.source = null;
                // make sure that vumeter is on
                micTimer.start(); // --> _miclevel
                // start preparations
                prep_counter = 4;
    		    preparationTimer.reset();
    		    recording_seconds=0;
				initCamera();
				video.visible = true;
				//still_screen.visible = false;
                preparationTimer.start(); // --> _prepareAnnouncement, _prepareComplete
			}
			
			private function _prepareAnnouncement(e:TimerEvent):void {
    		    prep_counter--;
                ExternalInterface.call("countdown", prep_counter);
			}

            private function _prepareComplete(e:TimerEvent):void {
                takePhoto();
				startRecorder();
            }
			
			private function startRecorder():void{
                recorder.record();
				recording = true;
			}
			private function stopRecorder():void{
			    recorder.stop();
				recording = false;
			}
			
			private function stopRecording():void {
                video.attachCamera(null);
				stopRecorder();
                // stop timers 
                micTimer.stop();
                sound_position = 0;
                still_screen.visible = true;
			}

            private function startPlaying():void {
			
				if(sound_position >= externalSound.length)	
					sound_position = 0;
					
				debug('Starting to play');
                
				soundChannel = externalSound.play(sound_position);
				soundChannel.addEventListener(Event.SOUND_COMPLETE, _onPlaybackComplete);
				
				playTimer = new Timer(32);
				playTimer.addEventListener(TimerEvent.TIMER, _displayPosition);
				playTimer.start();
			
				function _onPlaybackComplete(e:Event):void{
					debug('Playing ended');
					playTimer.stop();
                    ExternalInterface.call("stopped_playing");
				}
            }

			private function _displayPosition(e:Event):void{
				ExternalInterface.call("recording_timer", Math.floor(soundChannel.position / 100));
			}


            private function stopPlaying():void {
				debug('Stopped');
				soundChannel.stop();
				playTimer.stop();
				ExternalInterface.call("stopped_playing");
				//sound_position=timeSlider.value*1000;                
            }

            private function movePlaybackToPosition(p:Number):void {
                // if (recording) {return;} // shouldn't happen
				if (p < 1) {
					sound_position = externalSound.length * p;
				} else {
					sound_position = externalSound.length;
				}
            }

            private function cancelRecording():void {
				recordCanceled = true;
				if(recording) { stopRecorder(); }
                video.attachCamera(null);
                // stop timers 
                micTimer.stop();
				preparationTimer.stop();
                sound_position = 0;
            }
			
            private function redoRecording():void {
				debug('Redoing');
				captured_shot.visible = false;
                startRecording();
            }
            
			private function saveRecording(server_path:String, title:String, user:String, noteTime:String): void {
			
                var ml:MultipartURLLoader = new MultipartURLLoader();
                ml.addEventListener(Event.COMPLETE, onReady);         
                ExternalInterface.call("uploadingRecording");
                                
                function onReady(e:Event):void {
                    // notify teamup that we are done
            		ExternalInterface.call("finishedRecording", ml.loader.data);
					uploaderTimer.stop();
                }
                function onError(evt:IOErrorEvent):void {
                   debug("Error: "+evt);
                    //ExternalInterface.call("photo_error", "error:"+evt);
                };
                function forceFinish(event : Event) : void {
                    // if the MultipartURLLoader hasn't responded in 20 seconds, assume that its return message is messed up
                    // and the files are there. Send end notification.
					uploaderTimer.stop();
            		ExternalInterface.call("finishedRecording", ml.loader.data);
                }
            
        		function onProgress(event : ProgressEvent) : void {
        		    //encoding.label='Sending...';
                    encoding_container.visible=true;
        		    encoding.label=''+event.bytesLoaded;
        		    encoding.setProgress(event.bytesLoaded,100);
        		}

                // simple string data
                //$_POST['class_name']
				//ml.addVariable('class_id', class_name);
				var id:Date = new Date();
                ml.addVariable('note_title', title);
                ml.addVariable('user_id', user);
                ml.addVariable('time', noteTime);
				debug('Starting to upload photo');
                if (photo_jpg) {
                    ml.addFile(photo_jpg, 'photo.jpg', 'photo', 'image/jpeg'); 
                }
				else
					debug('But it failed');
                ml.addFile(mp3Encoder.mp3Data, 'voice.mp3', 'voice', 'audio/mpeg');                 

                try {
                    ml.load(server_path + "php/upload.php", false);  
                } catch (error:Error) {
                    debug(error.message + ' ' + error.toString());
                } finally {};
                
				uploaderTimer = new Timer(10000);
				uploaderTimer.addEventListener(TimerEvent.TIMER, forceFinish);
                uploaderTimer.reset();
                uploaderTimer.start();
            }
            // // this should be the only function to use those path parameters 
			
			private function _miclevel(event:TimerEvent):void {
                ExternalInterface.call("audioLevel", mymic.activityLevel);
			}

    		private function _onRecording(event:RecordingEvent):void {
    			// debug("Recording : " + (event.time/1000).toFixed(1) + " s.");
                if (event.time > note_length + 1000) { // Flash cuts one second from the end of recording
                    stopRecording();
                }
    			if (Math.floor(event.time / 100) > recording_seconds) {
    			    recording_seconds++;
                    ExternalInterface.call("recording_timer", recording_seconds);
    			}
    			record_len=event.time;
    		}
			
    		private function _onRecordComplete(event:Event):void {
				
				video.visible = false;
				if(recordCanceled) {
					recordCanceled = false;
					return;
				}
				else
				{
					ExternalInterface.call("recording_stopped");
					debug("Record : " + (record_len/1000).toFixed(1) + " s.");
					function _mp3EncodeProgress(event : ProgressEvent) : void {
						encoding.setProgress(event.bytesLoaded,100);
					}        
					function _mp3EncodeError(event : ErrorEvent) : void {
						debug('Encode error:' + event.text);
					}
					function _mp3EncodeComplete(event : Event) : void {
						mp3Encoder.removeEventListener(ProgressEvent.PROGRESS, _mp3EncodeProgress);
						mp3Encoder.removeEventListener(Event.COMPLETE, _mp3EncodeComplete);
						mp3Encoder.removeEventListener(ErrorEvent.ERROR, _mp3EncodeError);
						debug('Encoding finished: ' + (mp3Encoder.mp3Data.length/1024).toFixed(1)+' kb.');
						encoding_container.visible = false;
						sound = new WavSound(recorder.output);
						ExternalInterface.call("encodingComplete");
					}
					mp3Encoder = new ShineMP3Encoder(recorder.output);
					mp3Encoder.addEventListener(Event.COMPLETE, _mp3EncodeComplete);
					mp3Encoder.addEventListener(ProgressEvent.PROGRESS, _mp3EncodeProgress);
					mp3Encoder.addEventListener(ErrorEvent.ERROR, _mp3EncodeError);
					mp3Encoder.start();						
					encoding_container.visible=true;
				}
            }
			
			/* Loading and playing external mp3 file */
			private function loadNote(id:Number, voice:String, picture:String, server_url:String):void {
				
				soundLoader = new URLLoader();
				soundLoader.dataFormat = URLLoaderDataFormat.BINARY;
				soundLoader.addEventListener(Event.COMPLETE, soundLoadComplete);
				
				imageLoader = new URLLoader();
				imageLoader.addEventListener(Event.COMPLETE, imageLoadComplete);
				
				debug('Start loading');
				soundLoader.load(new URLRequest(server_url + voice));
				imageLoader.load(new URLRequest(server_url + picture));
			}
			
			private function imageLoadComplete(event:Event):void{
				debug('ImageLoadComplete');
				var loader:URLLoader = URLLoader(event.target);
				captured_shot.source = loader.data;
			}
			
			private function soundLoadComplete(event:Event):void{
				debug('SoundLoadComplete');
				var loader:URLLoader = URLLoader(event.target);
				externalSound = new Sound(loader.data);
			}

		]]>
	</fx:Script>
    <mx:UIComponent id="uic" x="0" y="0" width="100%" height="100%" />
    <mx:UIComponent id="still_screen" x="0" y="0" width="100%" height="100%" visible="false" />
	<s:Image id="captured_shot" width="100%" height="100%" visible="true" scaleMode="stretch" />
	<mx:Label color="0xffffff" x="10" y="100" id="_error" visible="false" text=""/>
    <mx:Box id="encoding_container" visible="false" x="0" y="0" width="100%" height="10" backgroundColor="#555555" alpha="0.8">
	<mx:ProgressBar id="encoding" x="10" y="0" width="100%" mode="manual" label="Encoding..." fontSize="10" chromeColor="0x008844" color="0xdddddd"/>
	</mx:Box>
</s:Application>

